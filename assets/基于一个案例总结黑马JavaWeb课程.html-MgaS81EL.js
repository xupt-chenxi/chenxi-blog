import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c,b as n,d as a,e as i,f as o}from"./app-5wIgtCPU.js";const l={},d=o(`<br><div class="custom-container cx"><p>陆陆续续学了快一个多月，总算是把黑马的这个JavaWeb课程给学完了😋<br>虽然课是叫 JavaWeb，但本质上是大杂烩，开发一个项目基本要用到的知识点都讲了下<br>但也正因如此，这个仅40小时的课程缺乏深度（40小时的课，陆陆续续学了一个多月😅）<br>而我将根据课程最后的案例（一个标准的增删改查系统）对该课进行总结</p></div><div><img src="https://pic.imgdb.cn/item/6592b865c458853aefb8f624.png&#39;)" alt="总结黑马JavaWeb" style="width:500px;"></div><h2 id="_1-环境准备" tabindex="-1"><a class="header-anchor" href="#_1-环境准备" aria-hidden="true">#</a> 1. 环境准备</h2><p>该案例使用 SpringBoot 进行开发，所以首先需要创建一个 SpringBoot工程</p><div class="custom-container cx"><p>该如何创建一个 SpringBoot工程？</p></div><p>不同 IDEA 可能创建方式不一样，以2023版本为例<br></p><div><img src="https://pic.imgdb.cn/item/6592b874c458853aefb93fb4.png" alt="总结黑马JavaWeb" style="width:500px;"></div><div class="custom-container cx"><p>注意到这里的 type 是 Maven，什么是 Maven？</p></div><p>在创建 SpringBoot工程时，可以引入需要的起步依赖，<br>该项目中，我需要用到的是：</p><ul><li>Spring Web</li><li>Lombok</li><li>MySQL Driver</li><li>MyBatis Framework</li></ul><p>因为要在项目中使用 MyBatis，所以还需在配置文件<code>application.properties</code>中引入 MyBatis 的配置信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 驱动类名称
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据库连接的url
spring.datasource.url=jdbc:mysql://localhost:3306/db01
# 连接数据库的用户名
spring.datasource.username=root
# 连接数据库的密码
spring.datasource.password=123456

# 配置mybatis的日志, 指定输出到控制台
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# 开启mybatis的驼峰命名自动映射开关 a_column ------&gt; aCloumn
mybatis.configuration.map-underscore-to-camel-case=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，就可以在该工程下创建<code>Mapper</code>包，<code>Service</code>包，<code>Controller</code>包以便来储存所要用到的类<br>到这里，是不是可以复习下<code>三层架构</code>的知识了呢</p><p>至此，案例的环境准备工作就完成了<br></p><div><img src="https://pic.imgdb.cn/item/6592b87bc458853aefb96751.png" alt="总结黑马JavaWeb" style="width:500px;"></div><div class="custom-container cx"><p>让我来总结下</p></div><ol><li>因为要使用 SpringBoot 来进行开发，所以要创建 SpringBoot 工程</li><li>项目中要用到 MyBatis （这里是利用 SpringBoot 集成 MyBatis 的方式），所以还需在配置文件<code>application.properties</code>中引入 MyBatis 的配置信息</li><li>根据三层架构的原则，在项目中创建好<code>Mapper</code>包，<code>Service</code>包，<code>Controller</code>包，并在其中定义好需要用到的类，以便我们后续在对应的类中完成业务代码的编写</li></ol><h2 id="_2-开发规范" tabindex="-1"><a class="header-anchor" href="#_2-开发规范" aria-hidden="true">#</a> 2. 开发规范</h2><p>现在主流的开发模式为前后端分离模式进行开发<br>即前端进行前端部分代码的编写，后端负责后端部分代码的编写<br>当然，前后端部分的代码到最后肯定是要进行交互的，前端发起请求时，后端也得响应正确的结果<br>所以前后端在进行开发时就需 <strong>严格遵守</strong> 接口文档进行开发<br></p><div><img src="https://pic.imgdb.cn/item/6592b882c458853aefb98d1b.png" alt="总结黑马JavaWeb" style="width:500px;"></div><div class="custom-container cx"><p>可以看到上图的请求和响应中间有一个<code>Restful</code>，这是个什么东西？</p></div><div><img src="https://pic.imgdb.cn/item/6592b88cc458853aefb9c2b6.png" alt="总结黑马JavaWeb" style="width:500px;"></div><p>即对前端的请求方式进行了约定，比如：<code>我要进行查询操作，那么发起请求的方式就应该是GET</code></p><p>既然前端的请求都有约定，那后端的响应肯定也是有约束的<br>如果不对后端的返回结果的格式有所约束，那前端处理起来可就太过头疼了<br>所以一般都会对后端返回数据的格式有所规定，即必须返回某个格式的数据<br>在本案例中，采用的是<code>Result</code></p><div><img src="https://pic.imgdb.cn/item/6592b897c458853aefb9fc89.png" alt="总结黑马JavaWeb" style="width:500px;"></div><h2 id="_3-开发流程" tabindex="-1"><a class="header-anchor" href="#_3-开发流程" aria-hidden="true">#</a> 3. 开发流程</h2><p>简单来说就是：</p><ol><li>看页面原型和接口文档，明确需求</li><li>思路分析</li><li>代码实现</li><li>接口测试与前后端联调</li></ol><p>后续进行案例开发时就按照这个开发流程来</p><h2 id="_4-举个例子来演示开发流程与总结框架的使用" tabindex="-1"><a class="header-anchor" href="#_4-举个例子来演示开发流程与总结框架的使用" aria-hidden="true">#</a> 4. 举个例子来演示开发流程与总结框架的使用</h2><p>接下来正式进入案例的开发<br>在该案例中需要开发的有两个功能，即部门管理与员工管理，且每个功能都有着好几个接口</p><div class="custom-container cx"><p>而这里以部门查询的接口实现为例，来演示下<code>开发流程</code>与总结<code>框架</code>的使用</p></div><p>根据开发流程，要做的第一步就是看页面原型和接口文档，明确需求<br>这里先看下整个部门管理功能的页面原型：<br></p><div><img src="https://pic.imgdb.cn/item/6592b89cc458853aefba1c01.png" alt="总结黑马JavaWeb" style="width:500px;"></div><div class="custom-container cx"><p>接下来进行部门查询接口实现</p></div><ol><li>阅读接口文档</li></ol><p>刚刚已经看过部门查询的页面原型了，接下来要做的就是阅读接口文档<br></p><div><img src="https://pic.imgdb.cn/item/6592b8a2c458853aefba3cfc.png" alt="总结黑马JavaWeb" style="width:500px;"></div><ol start="2"><li>思路分析</li></ol><p>仔细阅读页面原型和接口文档后，要进行的就是思路分析，想一想自己该怎么实现这个接口<br></p><div><img src="https://pic.imgdb.cn/item/6592b8a8c458853aefba602a.png" alt="总结黑马JavaWeb" style="width:500px;"></div><ol start="3"><li>代码实现</li></ol><p>在代码实现中就涉及到了框架的使用<br>要说明的是在黑马JavaWeb的整个课程中，几乎没有涉及到任何原理的讲解，只说明了如何去使用<br>所以，我也只会从使用的角度进行总结</p><div class="custom-container cx"><p>该怎么使用框架？通过注解</p></div><p><code>controller层</code>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DeptService</span> deptService<span class="token punctuation">;</span>

    <span class="token comment">// @RequestMapping(value = &quot;/depts&quot;, method = RequestMethod.GET) //指定请求方式为Get，但这种方式有点繁琐了</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/depts&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 使用 SpringBoot 提供的另一种注解</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;查询全部部门数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> deptList <span class="token operator">=</span> deptService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>deptList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-中的-restcontroller" tabindex="-1"><a class="header-anchor" href="#spring-中的-restcontroller" aria-hidden="true">#</a> Spring 中的 @RestController</h3><p>可以看到我在<code>DeptController</code>上加了注解<code>@RestController</code><br>首先要说明的是<code>@RestController</code>结合了<code>@Controller</code>和<code>@ResponseBody</code>两个注解的功能<br>那<code>@RestController</code>有啥用，简单来说有两个作用：</p><ol><li>表明该类可以接收并处理来自客户端的请求，并生成对应的响应（<code>@Controller</code>）</li><li>让类中方法的返回值转为<code>JSON</code>格式的数据（<code>@ResponseBody</code>）<div class="custom-container cx"><p>从<code>@RestController</code>的作用中，我们其实可以发现，这不就是为<code>controller层</code>的类量身定做的么<br>因为<code>controller层</code>的作用就是接收前端发送的请求，为前端响应数据</p></div></li></ol><h3 id="requestmapping-与-getmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping-与-getmapping" aria-hidden="true">#</a> @RequestMapping 与 @GetMapping</h3><p>在方法<code>list()</code>上我添加了注解<code> @GetMapping</code>用于替代<code>@RequestMapping</code>，也是与前文的开发规范相对应<br>当然，无论是<code>@GetMapping</code>还是<code>@RequestMapping</code>，作用都是在前端发起请求时，调用相对应的方法<br>在这里就是当前端向地址：<code>http://localhost:8080/depts</code>发起请求时（可以省略<code>http://localhost:8080</code>）调用<code>list()</code>这个方法</p><h3 id="spring-中的-ioc-与-di" tabindex="-1"><a class="header-anchor" href="#spring-中的-ioc-与-di" aria-hidden="true">#</a> Spring 中的 IOC 与 DI</h3><p>在我定义的 sevice层的类 <code>private DeptService deptService</code>上也有一个注解<code>@Autowired</code>，是干嘛的？<br>这就涉及到了 Spring 中的 IOC 与 DI，即控制反转与依赖注入</p><p><code>service层</code>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DeptService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DeptMapper</span> deptMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> deptMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Mapper层方法查询所有部门后向controller返回</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mapper层</code>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询所有部门</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from dept&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mybatis-的简单使用" tabindex="-1"><a class="header-anchor" href="#mybatis-的简单使用" aria-hidden="true">#</a> MyBatis 的简单使用</h3><p>在<code>mapper层</code>中因为要操作数据库，所以需要使用 MyBatis<br>这里是通过注解的方式来编写 SQL 语句<br></p><ol start="4"><li>接口测试与前后端联调</li></ol><p>代码的实现完成后，要做的就是进行接口的测试以及前后端的联调<br>接口测试，可以使用 Postman<br>前后端联调：前端工程和后端工程同时启动起来，通过前端工程访问后端工程的接口</p><div class="custom-container cx"><p>ok，至此，部门查询接口的开发就完成了，本身实现没有什么难度，但重点是通过这个例子，复习总结下 Spring框架与 MyBatis框架的使用，以及整个接口开发的流程</p></div><h2 id="_5-从其他接口的实现中找出不同点" tabindex="-1"><a class="header-anchor" href="#_5-从其他接口的实现中找出不同点" aria-hidden="true">#</a> 5. 从其他接口的实现中找出不同点</h2><div class="custom-container cx"><p>刚刚已经完成了对部门查询接口的开发<br>而剩下的接口的开发流程大体上来说都是很类似的，所以只需重点关注其中的不同点</p></div><h3 id="请求参数" tabindex="-1"><a class="header-anchor" href="#请求参数" aria-hidden="true">#</a> 请求参数</h3><p>在部门查询的接口实现中，前端发送的请求中并未携带请求参数，而通过接口文档可以发现，新增部门与删除部门，前端发送的请求中都有携带请求参数<br>删除部门：<br></p><div><img src="https://pic.imgdb.cn/item/6592b8aec458853aefba8142.png" alt="总结黑马JavaWeb" style="width:500px;"></div><p>新增部门：<br></p><div><img src="https://pic.imgdb.cn/item/6592b8b4c458853aefbaa3b6.png" alt="总结黑马JavaWeb" style="width:500px;"></div><p>所以在接收前端请求时，要考虑如何对参数进行接收<br>贴一下<code>controller层</code>的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/depts/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;删除ID为：&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot; 的部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deptService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/depts&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Dept</span> dept<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;添加名为：&quot;</span> <span class="token operator">+</span> dept<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 的部门&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    deptService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@PathVariable</code>用于接收路径参数<br><code>@RequestBody</code>用于接收JSON参数</p><h3 id="分页插件-pagehelper" tabindex="-1"><a class="header-anchor" href="#分页插件-pagehelper" aria-hidden="true">#</a> 分页插件 PageHelper</h3><p>不同于部门查询，员工查询的接口要求进行分页条件查询</p><div><img src="https://pic.imgdb.cn/item/6592b8bac458853aefbac343.png" alt="总结黑马JavaWeb" style="width:500px;"></div><p>可以看到请求参数中有<code>page</code>与<code>pageSize</code>两个参数，用于进行分页查询<br>那么按先前的思路可能就是根据<code>page</code>与<code>pageSize</code>两个参数算出起始索引，然后通过 SQL 中的<code>limit</code>来进行分页查询</p><div class="custom-container cx"><p>这样做没有问题，但会有一些繁琐，可以借助分页插件 PageHelper 来简化开发</p></div><div><img src="https://pic.imgdb.cn/item/6592b8bfc458853aefbae1d7.png" alt="总结黑马JavaWeb" style="width:500px;"></div><div><img src="https://pic.imgdb.cn/item/6592b8c5c458853aefbb027e.png" alt="总结黑马JavaWeb" style="width:500px;"></div><h3 id="动态sql-与-xml-映射文件" tabindex="-1"><a class="header-anchor" href="#动态sql-与-xml-映射文件" aria-hidden="true">#</a> 动态SQL 与 XML 映射文件</h3><p>完成了对分页查询的实现，再加上条件进行查询</p><div><img src="https://pic.imgdb.cn/item/6592b8c9c458853aefbb188e.png" alt="总结黑马JavaWeb" style="width:500px;"></div><p>SQL语句较为复杂，且涉及到条件查询，那我们就得使用<code>动态SQL</code>，所以在使用 MyBatis框架时，我没有像在部门管理时通过注解的方式来编写 SQL语句，而是使用<code>XML映射文件</code>的方式<br>在这之中我还需注意两点：<br>可以使用<code>@RequestParam(defaultValue = &quot;1&quot;)</code>的方式，给参数设置默认值<br>可以使用<code>@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</code>的方式，为时间类参数设置格式</p><div class="custom-container cx"><p>可以发现使用了 PageHelper插件，就简化了分页查询操作，让我可以把注意力集中在条件查询上</p></div><h3 id="批量删除" tabindex="-1"><a class="header-anchor" href="#批量删除" aria-hidden="true">#</a> 批量删除</h3><p>不同于部门管理时的单个删除，删除员工的接口涉及到到批量操作</p><div><img src="https://pic.imgdb.cn/item/6592b8d0c458853aefbb40af.png" alt="总结黑马JavaWeb" style="width:500px;"></div><p>所以我采用<code>list</code>来接收请求参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/emps/{ids}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    empService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于批量删除的操作，使用动态SQL的<code>foreach</code>标签</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>delete<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  delete from emp where id in
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ids<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    #{id}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-写在最后" tabindex="-1"><a class="header-anchor" href="#_7-写在最后" aria-hidden="true">#</a> 7. 写在最后</h2><p>至此，就完成了对案例的总结<br>虽然不是全部，但也对我在学习黑马JavaWeb视频时，一些关键的知识点进行了梳理<br>在总结中，其实还有两个关键知识点，没有提到</p><ul><li>文件上传（前端该如何上传文件，后端又该如何进行接收？）</li><li>登录校验（如何进行用户登录的校验？会话跟踪的三种方案：<code>Cookie，Seesion，JWT令牌</code>，过滤器<code>Filter</code>与拦截器<code>Interceptor</code>怎么使用？）</li></ul><p>因为这两部分相对独立，且内容较多，所以准备等以后再单独进行总结</p><div class="custom-container cx"><p>黑马JavaWeb 这个课程，怎么说呢，课还是很不错的，把项目开发中会用到的知识点都串了起来（从前端的知识点 -&gt; Maven -&gt; 框架（ 根据 SpringBoot 来进行使用 ）-&gt; MySQL -&gt; MyBatis -&gt; 案例学习（加入了文件上传与登录校验）<br>但正因涉及到的知识点很多，但课时只有40小时，所以讲的很浅，也留下了很多的坑，等着我后面去补，比如：</p><ul><li>如果不使用 SpringBoot，我如何单独使用 Spring 和 MyBatis 框架进行开发</li><li>是不是应该再去单独看下专门讲框架的课程，深入学习下</li><li>JavaWeb 中的 Servlet 没有讲，是不是应该学习一下</li></ul><p>但这种先泛而精的学习，对我而言是效率很高的方式😉</p></div><hr>`,98),u={href:"https://www.bilibili.com/video/BV1m84y1w7Tb/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click",target:"_blank",rel:"noopener noreferrer"};function r(v,k){const s=t("ExternalLinkIcon");return p(),c("div",null,[d,n("p",null,[a("参考资料："),n("a",u,[a("黑马程序员JavaWeb开发教程"),i(s)])])])}const g=e(l,[["render",r],["__file","基于一个案例总结黑马JavaWeb课程.html.vue"]]);export{g as default};
